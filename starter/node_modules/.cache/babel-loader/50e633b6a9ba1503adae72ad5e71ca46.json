{"ast":null,"code":"var _jsxFileName = \"/Users/KristinCurry/Dev/FinalProject/starter/src/Bookshelf.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Bookshelf = () => {\n  _s();\n\n  const currentlyReadingShelfName = \"currentlyReading\";\n  const wantToReadShelfName = \"wantToRead\";\n  const readShelfName = \"read\";\n  const [currentlyReading, setCurrentlyReading] = useState([]);\n  const [wantToRead, setWantToRead] = useState([]);\n  const [read, setRead] = useState([]);\n  useEffect(() => {\n    const getAllBooks = async () => {\n      const res = await BooksAPI.getAll();\n      console.log(res);\n      setCurrentlyReading(res.filter(book => book.shelf === currentlyReadingShelfName));\n      setWantToRead(res.filter(book => book.shelf === wantToReadShelfName));\n      setRead(res.filter(book => book.shelf === readShelfName));\n    };\n\n    getAllBooks();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [currentlyReading.map(book => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: book.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 41\n    }, this)), wantToRead.map(book => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: book.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 35\n    }, this)), read.map(book => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: book.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 29\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Bookshelf, \"YaNwzx1LyeAlWFDCS2t1OQg2lPo=\");\n\n_c = Bookshelf;\nexport default Bookshelf;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bookshelf\");","map":{"version":3,"sources":["/Users/KristinCurry/Dev/FinalProject/starter/src/Bookshelf.js"],"names":["useEffect","useState","BooksAPI","Bookshelf","currentlyReadingShelfName","wantToReadShelfName","readShelfName","currentlyReading","setCurrentlyReading","wantToRead","setWantToRead","read","setRead","getAllBooks","res","getAll","console","log","filter","book","shelf","map","title"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;;;AAEA,MAAMC,SAAS,GAAG,MAAK;AAAA;;AACnB,QAAMC,yBAAyB,GAAG,kBAAlC;AACA,QAAMC,mBAAmB,GAAG,YAA5B;AACA,QAAMC,aAAa,GAAG,MAAtB;AAEA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CP,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMa,WAAW,GAAG,YAAW;AAC3B,YAAMC,GAAG,GAAG,MAAMZ,QAAQ,CAACa,MAAT,EAAlB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAN,MAAAA,mBAAmB,CAACM,GAAG,CAACI,MAAJ,CAAYC,IAAD,IAASA,IAAI,CAACC,KAAL,KAAehB,yBAAnC,CAAD,CAAnB;AACAM,MAAAA,aAAa,CAACI,GAAG,CAACI,MAAJ,CAAYC,IAAD,IAASA,IAAI,CAACC,KAAL,KAAef,mBAAnC,CAAD,CAAb;AACAO,MAAAA,OAAO,CAACE,GAAG,CAACI,MAAJ,CAAYC,IAAD,IAASA,IAAI,CAACC,KAAL,KAAed,aAAnC,CAAD,CAAP;AACH,KAND;;AAOAO,IAAAA,WAAW;AACd,GATQ,EASN,EATM,CAAT;AAWA,sBAAO;AAAA,eACFN,gBAAgB,CAACc,GAAjB,CAAsBF,IAAD,iBAAU;AAAA,gBAAMA,IAAI,CAACG;AAAX;AAAA;AAAA;AAAA;AAAA,YAA/B,CADE,EAEFb,UAAU,CAACY,GAAX,CAAgBF,IAAD,iBAAU;AAAA,gBAAMA,IAAI,CAACG;AAAX;AAAA;AAAA;AAAA;AAAA,YAAzB,CAFE,EAGFX,IAAI,CAACU,GAAL,CAAUF,IAAD,iBAAU;AAAA,gBAAMA,IAAI,CAACG;AAAX;AAAA;AAAA;AAAA;AAAA,YAAnB,CAHE;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAKH,CAzBD;;GAAMnB,S;;KAAAA,S;AA2BN,eAAeA,SAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport * as BooksAPI from \"./BooksAPI\";\n\nconst Bookshelf = () =>{\n    const currentlyReadingShelfName = \"currentlyReading\";\n    const wantToReadShelfName = \"wantToRead\";\n    const readShelfName = \"read\";\n\n    const [currentlyReading, setCurrentlyReading] = useState([]);\n    const [wantToRead, setWantToRead] = useState([]);\n    const [read, setRead] = useState([]);\n\n    useEffect(()=>{\n        const getAllBooks = async () =>{\n            const res = await BooksAPI.getAll();\n            console.log(res);\n            setCurrentlyReading(res.filter((book)=> book.shelf === currentlyReadingShelfName));\n            setWantToRead(res.filter((book)=> book.shelf === wantToReadShelfName));\n            setRead(res.filter((book)=> book.shelf === readShelfName));\n        };\n        getAllBooks();\n    }, []);\n\n    return <div>\n        {currentlyReading.map((book) => <div>{book.title}</div>)}\n        {wantToRead.map((book) => <div>{book.title}</div>)}\n        {read.map((book) => <div>{book.title}</div>)}\n    </div>\n};\n\nexport default Bookshelf;"]},"metadata":{},"sourceType":"module"}