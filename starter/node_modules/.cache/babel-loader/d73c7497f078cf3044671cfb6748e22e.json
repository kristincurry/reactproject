{"ast":null,"code":"var _jsxFileName = \"/Users/KristinCurry/Dev/FinalProject/starter/src/Bookshelf.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport List from \"./List\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Bookshelf = () => {\n  _s();\n\n  const currentlyReadingShelfName = \"currentlyReading\";\n  const wantToReadShelfName = \"wantToRead\";\n  const readShelfName = \"read\";\n  const [currentlyReading, setCurrentlyReading] = useState([]);\n  const [wantToRead, setWantToRead] = useState([]);\n  const [read, setRead] = useState([]);\n  useEffect(() => {\n    getAllBooks();\n  }, []);\n\n  const getAllBooks = async () => {\n    const res = await BooksAPI.getAll();\n    setCurrentlyReading(res.filter(book => book.shelf === currentlyReadingShelfName));\n    setWantToRead(res.filter(book => book.shelf === wantToReadShelfName));\n    setRead(res.filter(book => book.shelf === readShelfName));\n  };\n\n  const updateBook = async (book, shelf) => {\n    const res = await BooksAPI.update(book, shelf);\n    getAllBooks();\n  };\n\n  const onShelfChange = (event, book) => {\n    var newShelf = event.currentTarget.value;\n    updateBook(book, newShelf);\n    console.log(newShelf);\n  };\n\n  const removeFromShelf = book => {\n    if (book.shelf === currentlyReadingShelfName) setCurrentlyReading(currentlyReading.filter(b => b.id !== book.id));else if (book.shelf === wantToReadShelfName) setWantToRead(wantToRead.filter(b => b.id !== book.id));else setRead(read.filter(b => b.id !== book.id));\n  };\n\n  const addToShelf = (book, newShelf) => {\n    book.shelf = newShelf;\n    if (newShelf === currentlyReadingShelfName) setCurrentlyReading(currentlyReading.concat(book));else if (newShelf === wantToReadShelfName) setWantToRead(wantToRead.concat(book));else setRead(read.concat(book));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list-books\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-books-title\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"MyReads\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-books-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bookshelf\",\n        children: [/*#__PURE__*/_jsxDEV(List, {\n          title: \"Currently Reading\",\n          books: currentlyReading,\n          onShelfChange: onShelfChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          title: \"Want To Read\",\n          books: wantToRead,\n          onShelfChange: onShelfChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          title: \"Read\",\n          books: read,\n          onShelfChange: onShelfChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Bookshelf, \"YaNwzx1LyeAlWFDCS2t1OQg2lPo=\");\n\n_c = Bookshelf;\nexport default Bookshelf;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bookshelf\");","map":{"version":3,"sources":["/Users/KristinCurry/Dev/FinalProject/starter/src/Bookshelf.js"],"names":["useEffect","useState","BooksAPI","List","Bookshelf","currentlyReadingShelfName","wantToReadShelfName","readShelfName","currentlyReading","setCurrentlyReading","wantToRead","setWantToRead","read","setRead","getAllBooks","res","getAll","filter","book","shelf","updateBook","update","onShelfChange","event","newShelf","currentTarget","value","console","log","removeFromShelf","b","id","addToShelf","concat"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport List from \"./List\";\n\nconst Bookshelf = () =>{\n    const currentlyReadingShelfName = \"currentlyReading\";\n    const wantToReadShelfName = \"wantToRead\";\n    const readShelfName = \"read\";\n\n    const [currentlyReading, setCurrentlyReading] = useState([]);\n    const [wantToRead, setWantToRead] = useState([]);\n    const [read, setRead] = useState([]);\n\n    useEffect(()=>{\n        \n        getAllBooks();\n    }, []);\n\n    const getAllBooks = async () =>{\n        const res = await BooksAPI.getAll();\n        setCurrentlyReading(res.filter((book)=> book.shelf === currentlyReadingShelfName));\n        setWantToRead(res.filter((book)=> book.shelf === wantToReadShelfName));\n        setRead(res.filter((book)=> book.shelf === readShelfName));\n    };\n\n    const updateBook = async (book, shelf) =>{\n        const res = await BooksAPI.update(book, shelf);\n        getAllBooks();\n    };\n\n    const onShelfChange = (event, book) =>{\n        var newShelf = event.currentTarget.value;\n        updateBook(book, newShelf);\n        console.log(newShelf);\n    };\n\n    const removeFromShelf = (book) =>{\n        if(book.shelf === currentlyReadingShelfName)\n            setCurrentlyReading(currentlyReading.filter((b)=> b.id !== book.id));\n        else if(book.shelf === wantToReadShelfName)\n            setWantToRead(wantToRead.filter((b)=> b.id !== book.id));\n        else\n            setRead(read.filter((b)=> b.id !== book.id));\n    };\n\n    const addToShelf = (book, newShelf) =>{\n        book.shelf = newShelf;\n        if(newShelf === currentlyReadingShelfName)\n            setCurrentlyReading(currentlyReading.concat(book));\n        else if(newShelf === wantToReadShelfName)\n            setWantToRead(wantToRead.concat(book));\n        else\n            setRead(read.concat(book));\n    };\n\n    return <div className=\"list-books\">\n        <div className=\"list-books-title\">\n            <h1>MyReads</h1>\n        </div>\n        <div className=\"list-books-content\">\n            <div className=\"bookshelf\">\n                <List title=\"Currently Reading\" books={currentlyReading} onShelfChange={onShelfChange}></List>\n                <List title=\"Want To Read\" books={wantToRead} onShelfChange={onShelfChange}></List>\n                <List title=\"Read\" books={read} onShelfChange={onShelfChange}></List>\n            </div>\n        </div>\n    </div>\n};\n\nexport default Bookshelf;"]},"metadata":{},"sourceType":"module"}